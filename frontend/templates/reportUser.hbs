<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report</title>
    <link rel="stylesheet" href="/reportUser.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="brand">
                <a href="/goHomeUser" style="font-family: 'Roboto', sans-serif;">Stack Inventory - USER : Reports</a>
            </div>
            <ul class="navbar-menu">
                <li>Welcome, <strong style="color: #4C43A2;">{{user.name}}</strong></li>
                <li><a href="">About</a></li>
                <li><a href="">Contact</a></li>
            </ul>
        </nav>
    </header>

    <aside>
        <ul>
            <li><img src="Casanas Suites.png" alt="Casanas Suites Logo"></li>
            <li><a href="/goHomeUser">Home</a></li>
            <li><a href="/dailyReport">Daily Report Tab</a></li>
            <li><a href="/reportView">Report Submitted</a></li>
            <li><a href="/logout">Logout</a></li>
        </ul>
    </aside>

    <main>
        <div class="report-container">
            {{#each reportData}}
                <div class="report-block">
                    <p><strong>Report by:</strong> {{this.userName}}</p>
                    <p><strong>Date:</strong> {{this.createdAt}}</p>
                    <button class="open-file-btn">Open file</button>
                    <div class="report-details" style="display: none;">
                        <p class="account" ><strong>Account: {{this.userName}}</strong></p>
                        <p class="date"><strong>Date:</strong> {{this.createdAt}}</p>
                        <p><strong>Items:</strong></p>
                        <table>
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Unit</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each this.reportData}}
                                <tr>
                                    <td>{{this.product}}</td>
                                    <td>{{this.quantitySubtracted}}</td>
                                    <td>{{this.unit}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            {{/each}}
        </div>
    </main>

    <!-- Modal for report details -->
    <div id="reportModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="reportDetails"></div>
            <button id="downloadBtn">Download Report</button>
        </div>
    </div>

    <script>
        // Get the modal
        var modal = document.getElementById('reportModal');

        // Get the button that opens the modal
        var btns = document.getElementsByClassName("open-file-btn");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal 
        for (var i = 0; i < btns.length; i++) {
            btns[i].onclick = function() {
                var reportDetails = this.nextElementSibling.innerHTML;
                document.getElementById('reportDetails').innerHTML = reportDetails;
                modal.style.display = "block";
            }
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function() {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        // Function to format and download the report file
        function downloadReport(userName, createdAt) {
            fetch('/report/downloadTemp', {
                method: 'GET',
                headers: {
                    // No need for Content-Type header for GET requests
                }
            })
            .then(response => {
                if (response.ok) {
                    // If the response is successful, create a blob from the response content
                    return response.json();
                }
                throw new Error('Failed to fetch report template');
            })
            .then(({ reportContent, filename }) => {
                // Create a blob from the report content
                const blob = new Blob([reportContent], { type: 'text/plain' });
                // Create a temporary link element
                const link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                // Set the filename obtained from the response
                link.download = filename;
                // Trigger the download by simulating a click event on the link
                link.click();
                // Clean up the URL object
                window.URL.revokeObjectURL(link.href);
            })
            .catch(error => {
                console.error('Error downloading report template:', error);
            });
        }

        // Get the modal
        var modal = document.getElementById('reportModal');

        // Get the download button
        var downloadBtn = document.getElementById('downloadBtn');

        // When the download button is clicked, extract the report details and call the downloadReport function
        downloadBtn.onclick = function () {
            // Get the report details only if the modal is open
            if (modal.style.display === "block") {
                // Get the report details element
                var reportDetails = document.querySelector('.report-details').textContent;
                //console.log(reportDetails);
                if (reportDetails) {
                    // Get the userName and createdAt from reportDetails
                    var userName = reportDetails.split('Account: ')[1].split('\n')[0].trim();
                    var createdAt = reportDetails.split('Date: ')[1].split('\n')[0].trim();
                    // Call the downloadReport function with the extracted details
                    downloadReport(userName, createdAt, reportDetails);
                } else {
                    console.error("Report details not found.");
                }
            } else {
                console.error("Modal is not open.");
            }
        }

    </script>
</body>
</html>
