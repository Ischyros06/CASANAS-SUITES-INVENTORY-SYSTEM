<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Home</title>
    <link rel="stylesheet" href="/userHome.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="brand">
                <a href="/goHomeAdmin" style="font-family: 'Roboto', sans-serif;">Stack Inventory - USER : Home</a>
            </div>
            <ul class="navbar-menu">
                <li>Welcome, <strong style="color: #4C43A2;">{{user.name}}</strong></li>
                <li><a href="/aboutUser">About</a></li>
                <li><a href="/contactUser">Contact</a></li>
            </ul>
        </nav>
    </header>

    <aside>
        <ul>
            <li><img src="Casanas Suites.png" alt="Casanas Suites Logo"></li>
            <li class="dropdown-toggle">
                <a href="/goHomeUser">Home</a>
                <!-- Arrow icon for dropdown -->
                <span class="arrow-down"></span>
                <!-- Dropdown menu -->
                <ul class="dropdown-menu">
                    <li data-category="breakfast"><a href="#">Breakfast</a></li>
                    <li data-category="condiments"><a href="#">Condiments</a></li>
                    <li data-category="drinks"><a href="#">Drinks</a></li>
                    <li data-category="fruits"><a href="#">Fruits</a></li>
                    <li data-category="kitchen aid"><a href="#">Kitchen Aid</a></li>
                    <li data-category="resto"><a href="#">Resto</a></li>
                    <li data-category="vegetables"><a href="#">Vegetables</a></li>
                </ul>
            </li>
            <li><a href="/dailyReport">Daily Report Tab</a></li>
            <li><a href="/reportView">Report Submitted</a></li>
            <li><a href="/logout">Logout</a></li>
        </ul>
    </aside>

    <div class="controlPanel">
        <ul name="items" id="items" class="items">
            <div class="item-container" >
                {{#each itemCollection}}
                <li value="{{this.product}}" class="item" data-product="{{this.product}}">
                    <img class="productImage" src="{{this.picture}}" alt="{{this.product}}">
                    <span class="itemName">{{this.product}}</span>
                    <span class="itemQuantity">{{this.quantity}}/{{this.maxQuantity}}</span>
                    <span class="itemUnit">{{this.unit}}</span>
                    <input type="number" id="quantityInput" placeholder="Enter quantity" class="quantity-input" data-unit="{{this.unit}}" min="1">
                    <button type="button" id="subtractQuantity" class="subtract-quantity" data-product="{{this.product}}" data-unit="{{this.unit}}">&minus;</button> <!--&minus; is as HTML entity for 'minus sign'-->
                </li>
                {{/each}}
            </div>
        </ul>
    </div>


    <script>
        // Function to fetch items based on category
        const fetchItemsByCategory = async (category) => {
            try {
                const response = await fetch(`/userHome/getItemsByCategory/${category}`);
                const data = await response.json();
                // Clear the existing items
                const itemsContainer = document.querySelector('.item-container');
                itemsContainer.innerHTML = '';

                // Render the items based on the response data
                data.forEach(item => {
                    const itemElement = document.createElement('li');
                    itemElement.value = item.product;
                    itemElement.className = 'item';
                    itemElement.setAttribute('data-product', item.product);
                    itemElement.innerHTML = `
                        <img class="productImage" src="${item.picture}" alt="${item.product}">
                        <span class="itemName">${item.product}</span>
                        <span class="itemQuantity">${item.quantity}/${item.maxQuantity}</span>
                        <span class="itemUnit">${item.unit}</span>
                        <input type="number" id="quantityInput" placeholder="Enter quantity" class="quantity-input" data-unit="${item.unit}" min="1">
                        <button type="button" class="subtract-quantity" data-product="${item.product}" data-unit="${item.unit}">&minus;</button>
                    `;
                    itemsContainer.appendChild(itemElement);
                });
                // Call toggleInputVisibility after rendering items
                toggleInputVisibility();
            } catch (error) {
                console.error(`Error fetching items: ${error}`);
            }
        };

        // Add event listener to the dropdown menu items
        document.querySelectorAll('.dropdown-menu li').forEach(item => {
            item.addEventListener('click', async () => {
                const category = item.dataset.category;
                fetchItemsByCategory(category);
            });
        });

        // Function to fetch and display near-depletion items
        async function fetchNearDepletionItems() {
            try {
                const response = await fetch('/getNearDepletionItems');
                const nearDepletionItems = await response.json();
            } catch (error) {
                console.error(`Error fetching near-depletion items: ${error}`);
            }
        }

        // Call the fetch NearDepletionItems function when the page loads
        document.addEventListener("DOMContentLoaded", fetchNearDepletionItems);

        document.addEventListener("DOMContentLoaded", () => {
            let currentQuantity;
            const itemsContainer = document.querySelector('.item-container');

            // Add event listener to the "subtract quantity" buttons for each item.
            itemsContainer.addEventListener('click', async (event) => {
                const target = event.target;

                // Check if the clicked element is a button with the class 'subtract-quantity'
                if (target.classList.contains('subtract-quantity')) {
                    const selectedProduct = target.getAttribute('data-product');
                    const unitInfo = target.getAttribute('data-unit');
                    const quantityInput = target.parentElement.querySelector('.quantity-input');
                    const quantityValue = parseInt(quantityInput.value) || 1; // Get the value from the input field

                    // Ensure a product is selected
                    if (!selectedProduct) {
                        console.error("No product selected");
                        return;
                    }

                    try {
                        // Decrement the quantity by the input value in the database.
                        const response = await fetch(`/userHome/subtractQuantity?product=${selectedProduct}&quantity=${quantityValue}&unit=${unitInfo}`);
                        const data = await response.json();

                        if (data.success) {
                            // Update the quantity display with the new quantity.
                            currentQuantity = data.quantity;
                            const quantityDisplay = target.parentElement.querySelector('.itemQuantity');
                            quantityDisplay.textContent = `${currentQuantity}/${data.maxQuantity}`;
                            console.log(`Quantity for ${selectedProduct} deducted successfully`);
                        } else {
                            console.error(`Failed to deduct quantity: ${data.message}`);
                        }
                    } catch (error) {
                        console.error(`Error reducing quantity: ${error}`);
                    }
                }
            });
    });

    // Function to toggle input visibility based on unit type
    const toggleInputVisibility = () => {
        // Remove the unit parameter from the function definition
        const inputs = document.querySelectorAll('.quantity-input');
        inputs.forEach(input => {
            // Change 'document' to 'input' and fix the attribute name to 'dataset.unit'
            const unit = input.dataset.unit;
            input.style.display = unit === 'grams' || unit === 'milliliters' ? 'block' : 'none';
        });
    };

    // Call toggleInputVisibility on page load
    toggleInputVisibility();

    // Add event listener for the dropdown toggle
    document.querySelector('.dropdown-toggle').addEventListener('click', function() {
        // Toggle active class to show/hide the dropdown menu
        this.classList.toggle('active');
    });
    </script>
</body>
</html>